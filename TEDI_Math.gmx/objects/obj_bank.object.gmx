<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_bank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bank Variables

// Properties variables
value = 0; // Total inside the bank
tag = NULL;
sound = NULL;
hover = false;

// Coordinates variables
x1 = 0; x2 = 0;
y1 = 0; y2 = 0;

// Draw variables
scale_x = 1;
scale_y = 1;
sprite = spr_null;
sprite_area = spr_area_bank;
width = 0;
height = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interaction with Coins

// Get bank coordinates
x1 = x; y1 = y;
x2 = x + width; y2 = y + height;

// Check interaction with coins
var i, collisions = 0;
for(i = 0; i &lt; instance_number(obj_money); i++){
    var coin = instance_find(obj_money, i);
    if(collision_rectangle(x1, y1, x2, y2, coin, true, false)){
        collisions++;
        coin.near = true;
        if(coin.droped){
            if(coin.value &gt; 0){
                with(coin){
                    instance_destroy();
                }   
            }else{
                coin.droped = 0;
                coin.near = false;
            }
        }
    }else{
        coin.near = false;
    }
}
if(collisions &gt; 0){
    hover = true;
}else{
    hover = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Bank

// Calculate width &amp; height
width = sprite_get_width(sprite_area) * image_xscale;
height = sprite_get_height(sprite_area) * image_yscale;

// Draw the bank
if(sprite != spr_null){
    // Calculate the scale for the back sprite
    scale_x = width / sprite_get_width(sprite);
    scale_y = height / sprite_get_height(sprite);
    
    // Draw the hover effect
    if(hover){
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sprite, image_index, x - 8, y - 8, scale_x, scale_y, image_angle, c_red, image_alpha);
        draw_sprite_ext(sprite, image_index, x + 8, y + 8, scale_x, scale_y, image_angle, c_red, image_alpha);
        draw_set_blend_mode(bm_normal);
    }
    
    // Draw the scaled bank
    draw_sprite_ext(sprite, image_index, x, y, scale_x, scale_y, image_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (DEV) Draw the Area

if(global.dev){
    draw_sprite_ext(sprite_area, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
