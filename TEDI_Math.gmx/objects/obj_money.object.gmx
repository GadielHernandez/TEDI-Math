<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_coin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_dragable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Coin Variables

// Properties variables
value = 0;
tag = NULL;
sound = NULL;
hover = false;
pressed = false;
caster = NULL;
near = false;
droped = false;

// Type variables
type = SOLID;
fliping = false;
flip_phase = 0;

// Position variables
xo = 0;
yo = 0;

// Draw variables
color = c_white;
face = 0;
scale = 1;
width = 0;
height = 0;
sprite = spr_null;
sprite_area = spr_area_coin;
image_speed = 0;

// Call all the creation events from parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Type Control

// Hover check
hover = collision_point(mouse_x, mouse_y, id, true, false);

// Type control
switch(type){
    case SOLID:
        scr_money_asign_sprite();
        scr_money_play_sound();
    break;
    
    case DRAGABLE:
        scr_money_asign_sprite();
        event_inherited(); // Run the dragable control
    break;
    
    case DRAGABLE_RETURN:
        scr_money_asign_sprite();
        event_inherited(); // Run the dragable control
        if(holded == false){
            if(near){
                droped = true;
            }else{
                x = xo;
                y = yo;
            }
        }
    break;
    
    case FLIPABLE:
        scr_money_asign_sprite_big();
        if(hover &amp;&amp; fliping == false &amp;&amp; global.click){
            fliping = true;
            flip_phase = 0;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Coin

// Calculate width &amp; height
width = sprite_get_width(sprite_area) * image_xscale;
height = sprite_get_height(sprite_area) * image_yscale;


if(sprite == spr_null){
    draw_sprite_ext(spr_area_coin, 1, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    draw_set_font(fnt_normal);
    draw_set_color(c_black);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text(x, y, string(value));
}else{
    draw_sprite_ext(sprite, face, x, y, image_xscale, image_yscale, image_angle, color, image_alpha);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flip Action

// Local variables
var flip_spd = 0.05 * scale;

if(fliping){
    // First flip
    if(flip_phase == 0){
        image_xscale -= flip_spd;
        if(image_xscale &lt;= 0.15 * scale){
            flip_phase = 1;
            if(face == 0){
                face = 1;
            }else{
                face = 0;
            }
        }
    }else{
        image_xscale += flip_spd;
        if(image_xscale &gt;= scale){
            image_xscale = scale;
            flip_phase = 0;
            fliping = false;
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
