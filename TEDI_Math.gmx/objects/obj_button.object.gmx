<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_btn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Button Variables

// Control variables
tag = NULL;

// Status variables
active = true;
hover = false;
pressed = false;
type = NULL;

// Type variables
next_room = rm_menu;

// Coordenates variables
x1 = 0; y1 = 0;
x2 = 0; y2 = 0;

// Properties variables
width = 0;
height = 0;

// Draw variables
scale_x = 1;
scale_y = 1;
sprite = spr_null;
sprite_area = spr_area_btn;

// Simple draw variables
font = fnt_normal;
font_color = c_black;
btn_color = c_silver;
btnh_color = c_dkgray;
op_color = c_dkgray;
oph_color = c_silver;
outline_color = c_black;
outlineh_color = c_black;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Button Control

// Check for button hover
if(active){
    if(sprite == spr_null){
        hover = hover_check(x1, y1, x2, y2);
    }else{
        hover = collision_point(mouse_x, mouse_y, id, true, false);
    }
}

// Check for pressed button
if(hover &amp;&amp; global.click){
    pressed = true;
}else{
    pressed = false;
}

// Check for button effects (TYPE)
if(pressed){
    switch(type){
        case NULL:
        break;
        case TELEPORTER:
            active = false;
            room_goto_transition(next_room, transition.circle, 80);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the button

// Calculate width &amp; height
width = sprite_get_width(sprite_area) * image_xscale;
height = sprite_get_height(sprite_area) * image_yscale;

// Draw if it's a sprite
if(sprite != spr_null){
    // Calculate the scale for the button sprite
    scale_x = width / sprite_get_width(sprite);
    scale_y = height / sprite_get_height(sprite);
    
    // Draw the scaled button sprite
    draw_sprite_ext(sprite, image_index, x, y, scale_x, scale_y, image_angle, c_white, image_alpha);
}else{
    // Get the position coordinates
    x1 = x; y1 = y;
    x2 = x + width;
    y2 = y + height;
    
    // Local variables
    var sel_color;
    
    // Draw the core button
    if(hover || pressed){
        sel_color = btnh_color;
    }else{
        sel_color = btn_color;
    }
    draw_set_color(sel_color);
    draw_rectangle(x1, y1, x2, y2, false);
    
    // Draw the button outline
    if(hover || pressed){
        sel_color = outlineh_color;
    }else{
        sel_color = outline_color;
    }
    draw_set_color(sel_color);
    draw_rectangle(x1, y1, x2, y2, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (DEV) Draw the Area

if(global.dev){
    draw_sprite_ext(sprite_area, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
