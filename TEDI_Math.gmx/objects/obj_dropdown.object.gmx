<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_dropdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dropdown Variables

// Control variables
tag = NULL;

// State variables
active = false;
hover = false;

// Properties variables
sel = 0;

// Content variables
op[0, NAME] = "Nivel I";
op[1, NAME] = "Nivel II";
op[2, NAME] = "Nivel III";

// Position variables
x1 = 0; x2 = 0;
y1 = 0; y2 = 0;

// Draw variables
scale_x = 1;
scale_y = 1;
sprite = spr_null;
sprite_area = spr_area_dropdown;

// Simple draw variables
font = fnt_normal;
font_color = c_black;
btn_color = c_silver;
btnh_color = c_dkgray;
op_color = c_dkgray;
oph_color = c_silver;
outline_color = c_black;
outlineh_color = c_black;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Dropdown

// Check for dropdown hover if un-active
if(active == false){
    hover = hover_check(x1, y1, x2, y2);
    
    if(hover &amp;&amp; global.click){
        active = true;
    }
}else{
    // Check for dropdown options when ACTIVE
    var i, hovers = false;
    for(i = 0; i &lt; array_height_2d(op); i++){
        op[i, HOVER] = hover_check(op[i, X1], op[i, Y1], op[i, X2], op[i, Y2]);
        
        // Check click for selecting an option
        if(op[i, HOVER]){
            hovers = true;
            if(global.click){
                sel = i;
                active = false;
            }
        }
    }
    
    // Check for click in any other area
    if(hovers == false &amp;&amp; global.click){
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Dropdown

// Draw setup
draw_set_font(font);

// Get the longest string in options
var i, longest = 0;
for(i = 0; i &lt; array_height_2d(op); i++){
    if(string_width(op[longest, NAME]) &lt; string_width(op[i, NAME])){
        longest = i;
    }
}

// Get the text width
var width = string_width(op[longest, NAME]);
var height = font_get_size(font);

// Get the rectangle size
var rec_width = width * 1.50;
var rec_height = height * 2;
var swidth = sprite_get_width(sprite_area) * image_xscale;
var sheight = sprite_get_height(sprite_area) * image_yscale;
if(swidth &gt; rec_width){
    rec_width = swidth;
}
if(sheight &gt; rec_height){
    rec_height = sheight;
}

x1 = x - (rec_width / 2);
x2 = x + (rec_width / 2);
y1 = y - (rec_height / 2);
y2 = y + (rec_height / 2);

// Draw setup
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw the rectangle
var sel_color;

// Draw the core button
if(hover || active){
    sel_color = btnh_color;
}else{
    sel_color = btn_color;
}
draw_set_color(sel_color);
draw_rectangle(x1, y1, x2, y2, false);

// Draw the button outline
if(hover || active){
    sel_color = outlineh_color;
}else{
    sel_color = outline_color;
}
draw_set_color(sel_color);
draw_rectangle(x1, y1, x2, y2, true);

// Draw the text
draw_set_color(font_color);
draw_text(x, y, op[sel, NAME]);

// Draw the options if active
if(active){
    var y_add = y;
    for(i = 0; i &lt; array_height_2d(op); i++){
        // Set the new coordinates
        y_add += rec_height;
        
        rec_width = width * 1.50;
        rec_height = height * 2;
        swidth = sprite_get_width(sprite_area) * image_xscale;
        sheight = sprite_get_height(sprite_area) * image_yscale;
        if(swidth &gt; rec_width){
            rec_width = swidth;
        }
        if(sheight &gt; rec_height){
            rec_height = sheight;
        }
        op[i, X1] = x - (rec_width / 2);
        op[i, X2] = x + (rec_width / 2);
        op[i, Y1] = y_add - (rec_height / 2);
        op[i, Y2] = y_add + (rec_height / 2);
        
        // Draw the core button
        if(op[i, HOVER]){
            sel_color = btnh_color;
        }else{
            sel_color = btn_color;
        }
        draw_set_color(sel_color);
        draw_rectangle(op[i, X1], op[i, Y1], op[i, X2], op[i, Y2], false);
        
        // Draw the button outline
        if(op[i, HOVER]){
            sel_color = outlineh_color;
        }else{
            sel_color = outline_color;
        }
        draw_set_color(sel_color);
        draw_rectangle(op[i, X1], op[i, Y1], op[i, X2], op[i, Y2], true);
        
        // Draw the text
        draw_set_color(font_color);
        draw_text(x, y_add, op[i, NAME]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEVELOPER Draw

if(global.dev){
    draw_sprite_ext(sprite_area, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
