<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_money</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Money Variables

// Properties variables
tag = NULL;
correct = false;
ready =  false;
selected = false;

// Status variables
money_value = 0; // Total off money value $$$
money_num = 0; // Number of coins/bills
money[0] = 0; // Value of the "i" coin/bill

// Position variables
x1 = 0; x2 = 0;
y1 = 0; y2 = 0;

// Draw variables
sprite = spr_null;
sprite_area = spr_area_money;
drawed = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Money Area Control

// Local variables
var i, j = 0, current_value = money_value;
var sum = 0, incomplete = true;

// Sum the area total money
for(i = 0; i &lt; array_length_1d(money); i++){
    sum += global.money[money[i], VALUE];
}

// Compare the real value to the sum
if(sum != money_value){
    ready = false;
    drawed = false;
    while(incomplete){
        i = irandom_range(0, array_height_2d(global.money) - 1);
        if(current_value - global.money[i, VALUE] &gt;= 0){
            current_value -= global.money[i, VALUE];
            money[j] = i;
            j++;
        }
        if(current_value == 0){
            incomplete = false;
        }
    }
}else{
    ready = true;
}

/* Old method
for(i = array_height_2d(global.money) - 1; i &gt;= 0; i--){
    while(current_value - global.money[i, VALUE] &gt;= 0){
        current_value -= global.money[i, VALUE];
        money[j] = i;
        j++;
    }
}
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for SELECTION

if(collision_point(mouse_x, mouse_y, id, true, false) &amp;&amp; global.click){
    selected = true;
}else{
    selected = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the COINS

var i;
var xx = x + 64, yy = y + 64, xs, ys;
var xo = xx, yo = yy;

if(ready &amp;&amp; drawed == false){
    for(i = 0; i &lt; array_length_1d(money); i++){
        // Get the coin information
        var m = instance_create(xx, yy, obj_money);
        m.value = global.money[money[i], VALUE];
        
        // Calculate next space X
        if(m.sprite != spr_null){
            xs = sprite_get_width(m.sprite) * 1.15;
            ys = sprite_get_height(m.sprite) * 1.15;
        }else{
            xs = sprite_get_width(m.sprite_area) * 1.15;
            ys = sprite_get_height(m.sprite_area) * 1.15;
        }
        
        // Jump to the next space
        xx += xs;
        if(!collision_point(xx + 16, yy, id, true, false)){
            yy += ys;
            xx = xo;
        }
    }
    drawed = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Contour

// Get the correct coordinates
x1 = x; y1 = y;
x2 = x + (sprite_get_width(sprite_area) * image_xscale);
y2 = y + (sprite_get_height(sprite_area) * image_yscale);

// Draw the main area
draw_set_color(c_ltgray);
draw_rectangle(x1, y1, x2, y2, false);

// Draw the out line
draw_set_color(c_black);
draw_rectangle(x1, y1, x2, y2, true);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (DEV) Draw the Area

if(global.dev){
    var odepth = depth;
    depth = 0;
    draw_sprite_ext(sprite_area, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    draw_set_font(fnt_dev);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
    draw_text(x, y, string(money_value));
    var yy = y + 15, ys = 15, i;
    for(i = 0; i &lt; array_length_1d(money); i++){
        draw_text(x, yy, "Money[" + string(i) + "]: " + string(global.money[money[i], VALUE]));
        yy += ys;
    }
    depth = odepth;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
